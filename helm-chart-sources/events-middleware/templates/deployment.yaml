{{- if not .Values.application.initializeCommand -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "trackableappname" . }}
  annotations:
    {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
    {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
  labels:
    track: "{{ .Values.application.track }}"
    tier: "{{ .Values.application.tier }}"
{{ include "sharedlabels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ template "appname" . }}
      track: "{{ .Values.application.track }}"
      tier: "{{ .Values.application.tier }}"
      release: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
{{- if .Values.strategyType }}
  strategy:
    type: {{ .Values.strategyType | quote }}
{{- end }}
  template:
    metadata:
      annotations:
        checksum/application-secrets: "{{ .Values.application.secretChecksum }}"
        {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
        {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        track: "{{ .Values.application.track }}"
        tier: "{{ .Values.application.tier }}"
{{ include "sharedlabels" . | indent 8 }}
    spec:
{{- if or (.Values.serviceAccount.name) (.Values.serviceAccountName) }}
      serviceAccountName: {{ .Values.serviceAccount.name | default .Values.serviceAccountName | quote }}
{{- end }}
      imagePullSecrets:
{{ toYaml .Values.image.secrets | indent 10 }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
{{- end }}
{{- if .Values.dnsConfig }}
      dnsConfig:
{{ toYaml .Values.dnsConfig | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.initContainers }}
      initContainers:
{{ toYaml .Values.initContainers | indent 8 }}
{{- end }}
{{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml .Values.topologySpreadConstraints | indent 8 }}
{{- end }}
{{- if or (.Values.persistence.enabled) (.Values.extraVolumes) }}
      volumes:
{{- if .Values.persistence.enabled }}
{{- $context := . }}
{{- range $volume := .Values.persistence.volumes }}
        - name: {{ $volume.name | quote }}
          persistentVolumeClaim:
            {{ $args := dict "context" $context "name" $volume.name }}
            claimName: {{ template "pvcName" $args }}
{{- end }}
{{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
{{- end }}
{{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 8 }}
{{- end }}
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "imagename" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.application.command }}
        command:
{{ toYaml .Values.application.command | indent 8 }}
{{- end }}
{{- if .Values.application.args }}
        args:
{{ toYaml .Values.application.args | indent 8 }}
{{- end }}
        {{- if .Values.application.secretName }}
        envFrom:
        - secretRef:
            name: {{ .Values.application.secretName }}
        {{- end }}
        env:
{{- if .Values.postgresql.managed }}
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: password
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: privateIP
{{- end }}
{{- if .Values.application.database_url }}
        - name: DATABASE_URL
          value: {{ .Values.application.database_url | quote }}
{{- end }}

{{- range $w, $s := .Values.application.extra_env }}
        - name: {{$w }}
          value: {{$s | quote}}
{{- end }}

{{- if .Values.application.env.INFLUXDB }}
        - name: INFLUXDB
          value: {{ .Values.application.env.INFLUXDB }}
{{- else }}
        - name: INFLUXDB
          value: sorba_demo___com
{{- end }}

{{- if .Values.application.env.INFLUX_HOST }}
        - name: INFLUX_HOST
          value: {{ .Values.application.env.INFLUX_HOST }}
{{- else }}
        - name: INFLUX_HOST
          value: {{ .Release.Name}}-influxdb-1-8
{{- end }}

{{- if .Values.application.env.INFLUX_PORT }}
        - name: INFLUX_PORT
          value: {{ .Values.application.env.INFLUX_PORT }}
{{- else }}
        - name: INFLUX_PORT
          value: 8086
{{- end }}

{{- if .Values.application.env.OPENID_CONNECT }}
        - name: OPENID_CONNECT
          value: {{ .Values.application.env.OPENID_CONNECT | squote }}
{{- else }}
        - name: OPENID_CONNECT
          value: '{ "clientID": "eHZa9GWG2le_KH8WLaoeNUb0FOgab", "clientSecret": "JJpVoMPKbl91xxRXb7mpfyZyAOMab", "issuer": "https://sorbais.sor.sorba.ai:443/oauth2/token", "authorizationURL": "https://sorbais.sor.sorba.ai/oauth2/authorize", "tokenURL": "https://sorbais.sor.sorba.ai/oauth2/token", "callbackURL": "https://oee.sor.sorba.ai/callback", "skipUserProfile": true }'
{{- end }}

{{- if .Values.application.env.REDIS_HOST }}
        - name: REDIS_HOST
          value: {{ .Values.application.env.REDIS_HOST}}
{{- else }}
        - name: REDIS_HOST
          value: {{ .Release.Name }}-redis-master
{{- end }}

{{- if .Values.application.env.REDIS_PORT }}
        - name: REDIS_PORT
          value: {{ .Values.application.env.REDIS_PORT }}
{{- else }}
        - name: REDIS_PORT
          value: 6379
{{- end }}

{{- if .Values.application.env.proxies }}
        - name: proxies
          value: {{ .Values.application.env.proxies | squote }}
{{- else }}
        - name: proxies
          value: '{"/oee":{"target":"http://sorbapp-oee-engine-auto-deploy-app-gitlab:5000","pathRewrite":{"^/oee":""},"secure":false,"changeOrigin":true,"logLevel":"debug"},"/dashboard":{"target":"http://{{ .Release.Name}}-grafana:3000","pathRewrite":{"^/dashboard":""},"secure":false,"changeOrigin":true,"logLevel":"debug"},"/tree":{"target":"http://sorbapp-tree-api-auto-deploy-app-gitlab:5000","pathRewrite":{"^/tree":""},"secure":false,"changeOrigin":true,"logLevel":"debug"},"/influx":{"target":"http://{{ .Release.Name}}-influxdb:8086","pathRewrite":{"^/influx":""},"secure":false,"changeOrigin":true,"logLevel":"debug"},"/sde-identity-service":{"target":"http://localhost:3005","pathRewrite":{"^/sde-identity-service":""},"secure":false,"changeOrigin":true,"logLevel":"debug"}}'
{{- end }}

{{- if .Values.application.env.redis }}
        - name: redis
          value: {{ .Values.application.env.redis | squote}}
{{- else }}
        - name: redis
          value: '{"host":"{{ .Release.Name }}-redis-master", "port": 6379}'
{{- end }}

        - name: GITLAB_ENVIRONMENT_NAME
          value: {{ .Values.gitlab.envName | quote }}
        - name: GITLAB_ENVIRONMENT_URL
          value: {{ .Values.gitlab.envURL | quote }}
{{- if .Values.lifecycle }}
        lifecycle:
{{ toYaml .Values.lifecycle | indent 10 }}
{{- end }}
        ports:
        - name: "{{ .Values.service.name }}"
          containerPort: {{ .Values.service.internalPort }}
{{- if .Values.service.extraPorts }}
{{- range $servicePort := .Values.service.extraPorts }}
        - name: {{ $servicePort.name }}
          containerPort: {{ $servicePort.targetPort }}
          {{- if $servicePort.protocol }}
          protocol: {{ $servicePort.protocol }}
          {{- end }}
{{- end }}
{{- end }}
        livenessProbe:
{{- if eq .Values.livenessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            scheme: {{ .Values.livenessProbe.scheme }}
            port: {{ .Values.livenessProbe.port | default .Values.service.internalPort }}
{{- if .Values.livenessProbe.httpHeaders }}
            httpHeaders:
{{- range $httpHeader := .Values.livenessProbe.httpHeaders }}
            - name: {{ $httpHeader.name }}
              value: {{ $httpHeader.value }}
{{- end }}
{{- end }}
{{- else if eq .Values.livenessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.livenessProbe.port | default .Values.service.internalPort }}
{{- else if eq .Values.livenessProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.livenessProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
{{- if eq .Values.readinessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            scheme: {{ .Values.readinessProbe.scheme }}
            port: {{ .Values.readinessProbe.port | default .Values.service.internalPort }}
{{- if .Values.readinessProbe.httpHeaders }}
            httpHeaders:
{{- range $httpHeader := .Values.readinessProbe.httpHeaders }}            
            - name: {{ $httpHeader.name }}
              value: {{ $httpHeader.value }}
{{- end }}
{{- end }}
{{- else if eq .Values.readinessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.readinessProbe.port | default .Values.service.internalPort }}
{{- else if eq .Values.readinessProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.readinessProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
{{- if .Values.startupProbe.enabled }}
        startupProbe:
{{- if eq .Values.startupProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.startupProbe.path }}
            scheme: {{ .Values.startupProbe.scheme }}
            port: {{ .Values.startupProbe.port | default .Values.service.internalPort }}
{{- if .Values.startupProbe.httpHeaders }}
            httpHeaders:
{{- range $httpHeader := .Values.startupProbe.httpHeaders }}
            - name: {{ $httpHeader.name }}
              value: {{ $httpHeader.value }}
{{- end }}
{{- end }}
{{- else if eq .Values.readinessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.startupProbe.port | default .Values.service.internalPort }}
{{- else if eq .Values.startupProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.startupProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
{{- if or (.Values.persistence.enabled) (.Values.extraVolumeMounts) }}
        volumeMounts:
{{- if .Values.persistence.enabled }}        
{{- range $volume := .Values.persistence.volumes }}
          - name: {{ $volume.name | quote }}
            mountPath: {{ $volume.mount.path | quote }}
            {{- if $volume.mount.subPath }}
            subPath: {{ $volume.mount.subPath | quote }}
            {{- end }}
{{- end }}
{{- end }}
{{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 10 }}           
{{- end }}
{{- end }}
{{- end -}}
