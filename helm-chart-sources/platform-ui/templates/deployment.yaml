{{- if not .Values.application.initializeCommand -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "trackableappname" . }}
  annotations:
    {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
    {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
  labels:
    track: "{{ .Values.application.track }}"
    tier: "{{ .Values.application.tier }}"
{{ include "sharedlabels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ template "appname" . }}
      track: "{{ .Values.application.track }}"
      tier: "{{ .Values.application.tier }}"
      release: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
{{- if .Values.strategyType }}
  strategy:
    type: {{ .Values.strategyType | quote }}
{{- end }}
  template:
    metadata:
      annotations:
        checksum/application-secrets: "{{ .Values.application.secretChecksum }}"
        {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
        {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        track: "{{ .Values.application.track }}"
        tier: "{{ .Values.application.tier }}"
{{ include "sharedlabels" . | indent 8 }}
    spec:
{{- if or (.Values.serviceAccount.name) (.Values.serviceAccountName) }}
      serviceAccountName: {{ .Values.serviceAccount.name | default .Values.serviceAccountName | quote }}
{{- end }}
      imagePullSecrets:
{{ toYaml .Values.image.secrets | indent 10 }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
{{- end }}
{{- if .Values.dnsConfig }}
      dnsConfig:
{{ toYaml .Values.dnsConfig | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.initContainers }}
      initContainers:
{{ toYaml .Values.initContainers | indent 8 }}
{{- end }}
{{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml .Values.topologySpreadConstraints | indent 8 }}
{{- end }}
{{- if or (.Values.persistence.enabled) (.Values.extraVolumes) }}
      volumes:
{{- if .Values.persistence.enabled }}
{{- $context := . }}
{{- range $volume := .Values.persistence.volumes }}
        - name: {{ $volume.name | quote }}
          persistentVolumeClaim:
            {{ $args := dict "context" $context "name" $volume.name }}
            claimName: {{ template "pvcName" $args }}
{{- end }}
{{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
{{- end }}
{{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 8 }}
{{- end }}
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "imagename" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.application.command }}
        command:
{{ toYaml .Values.application.command | indent 8 }}
{{- end }}
{{- if .Values.application.args }}
        args:
{{ toYaml .Values.application.args | indent 8 }}
{{- end }}
        {{- if .Values.application.secretName }}
        envFrom:
        - secretRef:
            name: {{ .Values.application.secretName }}
        {{- end }}
        env:
{{- if .Values.postgresql.managed }}
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: password
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: app-postgres
              key: privateIP
{{- end }}
{{- if .Values.application.database_url }}
        - name: DATABASE_URL
          value: {{ .Values.application.database_url | quote }}
{{- end }}

{{- range $w, $s := .Values.application.extra_env }}
        - name: {{$w }}
          value: {{$s | quote}}
{{- end }}

{{- if .Values.application.env.OPENID_CONNECT }}
        - name: OPENID_CONNECT
          value: {{ .Values.application.env.OPENID_CONNECT | squote }}
{{- else }}
        - name: OPENID_CONNECT
          value: '{ "clientID": "gq0aTATyGOf4sRXggyQjwJ1V6hka", "clientSecret": "UtQmCLX5Y_cTsfqwW2wgVTw8oOEa", "issuer": "https://sorbais.{{ .Release.Namespace }}.sorba.com:443/oauth2/token", "authorizationURL": "https://sorbais.{{ .Release.Namespace }}.sorba.com/oauth2/authorize", "tokenURL": "https://sorbais.{{ .Release.Namespace }}.sorba.com/oauth2/token", "callbackURL": "https://platform.{{ .Release.Namespace }}.sorba.com/callback", "skipUserProfile": true }'
{{- end }}

{{- if .Values.application.env.SESSION_SETTINGS }}
        - name: SESSION_SETTINGS
          value: {{ .Values.application.env.SESSION_SETTINGS | squote }}
{{- else }}
        - name: SESSION_SETTINGS
          value: '{ "name": "platform-website", "secret": "jqHmJcoXvhn0kQVumnvQ" }'
{{- end }}

{{- if .Values.application.env.deployType }}
        - name: deployType
          value: {{ .Values.application.env.deployType }}
{{- else }}
        - name: deployType
          value: cloud
{{- end }}

{{- if .Values.application.env.googleMapsKey }}
        - name: googleMapsKey
          value: {{ .Values.application.env.googleMapsKey }}
{{- else }}
        - name: googleMapsKey
          value: IzaSyBNj7leq6sjqp-cjKZscq6AjlHCT4vS_YM
{{- end }}

{{- if .Values.application.env.googleMapsURL }}
        - name: googleMapsURL
          value: {{ .Values.application.env.googleMapsURL }}
{{- else }}
        - name: googleMapsURL
          value: https://maps.googleapis.com/maps/api/js
{{- end }}

{{- if .Values.application.env.identityServiceAPI }}
        - name: identityServiceAPI
          value: {{ .Values.application.env.identityServiceAPI }}
{{- else }}
        - name: identityServiceAPI
          value: https://wso2am-pattern-1-am-service:8243/identity/v1
{{- end }}

{{- if .Values.application.env.proxies }}
        - name: proxies
          value: {{ .Values.application.env.proxies | squote }}
{{- else }}
        - name: proxies
          value: '{
    "/identity-server": {
      "target": "https://wso2am-pattern-1-am-service:8243/identity/v1/",
      "pathRewrite": {
        "^/identity-server": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/tree": {
      "target": "https://wso2am-pattern-1-am-service:8243/tree/v1/",
      "pathRewrite": {
        "^/tree": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/devices": {
      "target": "http://sorbotics-sorba-collector-api.prod.sorbapp.com",
      "pathRewrite": {
        "^/devices": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/uuid-gen": {
      "target": "http://sorbapp-uuid-gen-api-auto-deploy-app-gitlab:5000",
      "pathRewrite": {
        "^/uuid-gen": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/asset": {
      "target": "http://sorbotics-sorba-asset-api.prod.sorbapp.com",
      "pathRewrite": {
        "^/asset": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/ml-trainer": {
      "target": "http://sorbapp-ml-trainer-api-auto-deploy-app-gitlab:5000",
      "pathRewrite": {
        "^/ml-trainer": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/rtdb": {
      "target": "http://webdis:7379",
      "pathRewrite": {
        "^/rtdb": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/hdfs-api": {
      "target": "http://sorbotics-ml-trainer-hdfs-api.prod.sorbapp.com",
      "pathRewrite": {
        "^/hdfs-api": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/api/commands/*": {
      "target": "https://websoc.{{ .Release.Namespace }}.sorba.com/api/commands",
      "pathRewrite": {
        "^/api/commands": ""
      },
      "secure": false,
      "logLevel": "debug",
      "changeOrigin": true
    },
    "/api/influx/*": {
      "target": "http://{{ .Release.Name}}.influxdb:8086",
      "pathRewrite": {
        "^/api/influx": ""
      },
      "secure": false,
      "logLevel": "debug",
      "changeOrigin": true
    }
  }'
{{- end }}

{{- if .Values.application.env.redis }}
        - name: redis
          value: {{ .Values.application.env.redis}}
{{- else }}
        - name: redis
          value: '{"host": "{{ .Release.Name }}-redis-master", "port": 6379}'
{{- end }}

{{- if .Values.application.env.sideMenu }}
        - name: sideMenu
          value: {{ .Values.application.env.sideMenu | squote }}
{{- else }}
        - name: sideMenu
          value: '[{"group":"","items":[{"label":"Overview","link":"/overview","icon":"ionicons:home-outline","alias":"Overview"},{"label":"Workspace","link":"/workspace","icon":"ionicons:grid-outline","alias":"Workspace"},{"label":"Dashboard","link":"/dashboard","icon":"ionicons:speedometer-outline","alias":"Dashboard","external":true,"disabled":false,"package":"grafana"},{"label":"Workflow","link":"/workflow","icon":"ionicons:shuffle-outline","alias":"Workflow","external":true,"disabled":true,"package":"sdc-workflow"}]},{"group":"Packages","items":[{"label":"ML Trainer","link":"/mlui","icon":"ionicons:hardware-chip-outline","alias":"MLTrainer","external":true,"disabled":true,"package":"ml-standalone-all"}]},{"group":"Settings","items":[{"label":"Identity Server","link":"/identity","icon":"ionicons:finger-print-outline","alias":"IdentityServer","external":true,"disabled":false,"package":"identity-service"},{"label":"Remote Access","link":"https://vpn.{{ .Release.Name}}.sorba.com","alias":"RemoteAccess","icon":"ionicons:key-outline"},{"label":"System Events","link":"/events","alias":"SystemEvents","icon":"ionicons:pulse-outline"}]}]'
{{- end }}

{{- if .Values.application.env.survey }}
        - name: survey
          value: {{ .Values.application.env.survey | squote}}
{{- else }}
        - name: survey
          value: '{"mainQuestion":"Do you like our new user interface?","secondaryQuestion": "How can we improve it?"}'
{{- end }}

{{- if .Values.application.env.socketUrl }}
        - name: socketUrl
          value: {{ .Values.application.env.socketUrl | squote}}
{{- else }}
        - name: socketUrl
          value: wss://websoc.{{ .Release.Namespace}}.sorbapp.com/websocket
{{- end }}

{{- if .Values.application.env.tenant }}
        - name: tenant
          value: {{ .Values.application.env.tenant | squote}}
{{- else }}
        - name: tenant
          value: {{ .Release.Name}}
{{- end }}

{{- if .Values.application.env.influxdb }}
        - name: influxdb
          value: {{ .Values.application.env.influxdb | squote}}
{{- else }}
        - name: influxdb
          value: '{"host":"{{ .Release.Name}}-influxdb","db":"sorba_demo___com","measurement":"__SYSTEM_EVENTS","port": 8086}'
{{- end }}

        - name: GITLAB_ENVIRONMENT_NAME
          value: {{ .Values.gitlab.envName | quote }}
        - name: GITLAB_ENVIRONMENT_URL
          value: {{ .Values.gitlab.envURL | quote }}
{{- if .Values.lifecycle }}
        lifecycle:
{{ toYaml .Values.lifecycle | indent 10 }}
{{- end }}
        ports:
        - name: "{{ .Values.service.name }}"
          containerPort: {{ .Values.service.internalPort }}
{{- if .Values.service.extraPorts }}
{{- range $servicePort := .Values.service.extraPorts }}
        - name: {{ $servicePort.name }}
          containerPort: {{ $servicePort.targetPort }}
          {{- if $servicePort.protocol }}
          protocol: {{ $servicePort.protocol }}
          {{- end }}
{{- end }}
{{- end }}
        livenessProbe:
{{- if eq .Values.livenessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            scheme: {{ .Values.livenessProbe.scheme }}
            port: {{ .Values.livenessProbe.port | default .Values.service.internalPort }}
{{- if .Values.livenessProbe.httpHeaders }}
            httpHeaders:
{{- range $httpHeader := .Values.livenessProbe.httpHeaders }}
            - name: {{ $httpHeader.name }}
              value: {{ $httpHeader.value }}
{{- end }}
{{- end }}
{{- else if eq .Values.livenessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.livenessProbe.port | default .Values.service.internalPort }}
{{- else if eq .Values.livenessProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.livenessProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
{{- if eq .Values.readinessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            scheme: {{ .Values.readinessProbe.scheme }}
            port: {{ .Values.readinessProbe.port | default .Values.service.internalPort }}
{{- if .Values.readinessProbe.httpHeaders }}
            httpHeaders:
{{- range $httpHeader := .Values.readinessProbe.httpHeaders }}            
            - name: {{ $httpHeader.name }}
              value: {{ $httpHeader.value }}
{{- end }}
{{- end }}
{{- else if eq .Values.readinessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.readinessProbe.port | default .Values.service.internalPort }}
{{- else if eq .Values.readinessProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.readinessProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
{{- if .Values.startupProbe.enabled }}
        startupProbe:
{{- if eq .Values.startupProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.startupProbe.path }}
            scheme: {{ .Values.startupProbe.scheme }}
            port: {{ .Values.startupProbe.port | default .Values.service.internalPort }}
{{- if .Values.startupProbe.httpHeaders }}
            httpHeaders:
{{- range $httpHeader := .Values.startupProbe.httpHeaders }}
            - name: {{ $httpHeader.name }}
              value: {{ $httpHeader.value }}
{{- end }}
{{- end }}
{{- else if eq .Values.readinessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.startupProbe.port | default .Values.service.internalPort }}
{{- else if eq .Values.startupProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.startupProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
{{- if or (.Values.persistence.enabled) (.Values.extraVolumeMounts) }}
        volumeMounts:
{{- if .Values.persistence.enabled }}        
{{- range $volume := .Values.persistence.volumes }}
          - name: {{ $volume.name | quote }}
            mountPath: {{ $volume.mount.path | quote }}
            {{- if $volume.mount.subPath }}
            subPath: {{ $volume.mount.subPath | quote }}
            {{- end }}
{{- end }}
{{- end }}
{{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 10 }}           
{{- end }}
{{- end }}
{{- end -}}
