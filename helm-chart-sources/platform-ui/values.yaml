# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
strategyType:
# `serviceAccountName` is deprecated in favor of `serviceAccount.name`
serviceAccountName:
image:
  repository: sorbaregistry.azurecr.io/sorbotics/platform-ui-test-20-08/pre-release
  tag: latest
  pullPolicy: IfNotPresent
  secrets:
    - name: azure-registry
extraLabels: {}
lifecycle: {}
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "sleep 10"]
podAnnotations: {}
nodeSelector: {}
dnsPolicy: {}
dnsConfig: {}
#    nameservers:
#      - 8.8.8.8
#    searches:
#      - svc.cluster.local
#      - cluster.local
#    options:
#      - name: ndots
#        value: "1"
affinity: {}
tolerations: []
priorityClassName:
initContainers: []
# - name: init-myservice
#   image: busybox
#   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice to start; sleep 1; done;']
topologySpreadConstraints: []
application:
  track: stable
  tier: web
  migrateCommand:
  initializeCommand:
  secretName:
  secretChecksum:
  # You can omit `DATABASE_URL` variable injection into your deployment containers,
  # if you explicitly set `database_url` to `null`.
  # database_url: null
  env:
    OPENID_CONNECT: '{ "clientID": "gq0aTATyGOf4sRXggyQjwJ1V6hka", "clientSecret": "UtQmCLX5Y_cTsfqwW2wgVTw8oOEa", "issuer": "https://sorbais.demo-com.sorba.ai:443/oauth2/token", "authorizationURL": "https://sorbais.demo-com.sorba.ai/oauth2/authorize", "tokenURL": "https://sorbais.demo-com.sorba.ai/oauth2/token", "callbackURL": "https://platform.demo-com.sorba.ai/callback", "skipUserProfile": true }'
    SESSION_SETTINGS: '{ "name": "platform-website", "secret": "jqHmJcoXvhn0kQVumnvQ" }'
    deployType: cloud
    googleMapsKey: IzaSyBNj7leq6sjqp-cjKZscq6AjlHCT4vS_YM
    googleMapsURL: https://maps.googleapis.com/maps/api/js
    identityServiceAPI: https://wso2am-pattern-1-am-service:8243/identity/v1
    proxies: '{
    "/identity-server": {
      "target": "https://wso2am-pattern-1-am-service:8243/identity/v1/",
      "pathRewrite": {
        "^/identity-server": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/tree": {
      "target": "https://wso2am-pattern-1-am-service:8243/tree/v1/",
      "pathRewrite": {
        "^/tree": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/devices": {
      "target": "http://sorbotics-sorba-collector-api.prod.sorbapp.com",
      "pathRewrite": {
        "^/devices": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/uuid-gen": {
      "target": "http://sorbapp-uuid-gen-api-auto-deploy-app-gitlab:5000",
      "pathRewrite": {
        "^/uuid-gen": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/asset": {
      "target": "http://sorbotics-sorba-asset-api.prod.sorbapp.com",
      "pathRewrite": {
        "^/asset": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/ml-trainer": {
      "target": "http://sorbapp-ml-trainer-api-auto-deploy-app-gitlab:5000",
      "pathRewrite": {
        "^/ml-trainer": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/rtdb": {
      "target": "http://webdis:7379",
      "pathRewrite": {
        "^/rtdb": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/hdfs-api": {
      "target": "http://sorbotics-ml-trainer-hdfs-api.prod.sorbapp.com",
      "pathRewrite": {
        "^/hdfs-api": ""
      },
      "secure": false,
      "changeOrigin": true,
      "logLevel": "debug"
    },
    "/api/commands/*": {
      "target": "https://websoc.demo-com.sorba.ai/api/commands",
      "pathRewrite": {
        "^/api/commands": ""
      },
      "secure": false,
      "logLevel": "debug",
      "changeOrigin": true
    },
    "/api/influx/*": {
      "target": "http://influxdb-1-8:8086",
      "pathRewrite": {
        "^/api/influx": ""
      },
      "secure": false,
      "logLevel": "debug",
      "changeOrigin": true
    }
  }'
    redis: '{"host": "bitnami-redis-master", "port": 6379}'
    sideMenu: '[{"group":"","items":[{"label":"Overview","link":"/overview","icon":"ionicons:home-outline","alias":"Overview"},{"label":"Workspace","link":"/workspace","icon":"ionicons:grid-outline","alias":"Workspace"},{"label":"Dashboard","link":"/dashboard","icon":"ionicons:speedometer-outline","alias":"Dashboard","external":true,"disabled":false,"package":"grafana"},{"label":"Workflow","link":"/workflow","icon":"ionicons:shuffle-outline","alias":"Workflow","external":true,"disabled":true,"package":"sdc-workflow"}]},{"group":"Packages","items":[{"label":"ML Trainer","link":"/mlui","icon":"ionicons:hardware-chip-outline","alias":"MLTrainer","external":true,"disabled":true,"package":"ml-standalone-all"}]},{"group":"Settings","items":[{"label":"Identity Server","link":"/identity","icon":"ionicons:finger-print-outline","alias":"IdentityServer","external":true,"disabled":false,"package":"identity-service"},{"label":"Remote Access","link":"https://vpn.demo-com.sorba.ai","alias":"RemoteAccess","icon":"ionicons:key-outline"},{"label":"System Events","link":"/events","alias":"SystemEvents","icon":"ionicons:pulse-outline"}]}]'
    survey: '{"mainQuestion":"Do you like our new user interface?","secondaryQuestion": "How can we improve it?"}'
  
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  # Only one of targetCPUUtilizationPercentage and metrics can be chosen.
  # This is because targetCPUUtilizationPercentage is from autoscaling/v1,
  # whereas metrics is from autoscaling/v2beta2. If both are provided, only
  # metrics will be used.
  # See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
  # for examples of each.
  targetCPUUtilizationPercentage: 80
  # metrics:
  # - type: Resource
  #   resource:
  #     name: cpu
  #     target:
  #       type: Utilization
  #       averageUtilization: 80

gitlab:
  app:
  env:
  envName:
  envURL:
  projectID:
service:
  enabled: true
  annotations: {}
  name: web
  type: ClusterIP
  url: http://my.host.com/
  additionalHosts:
  commonName:
  externalPort: 5000
  internalPort: 5000
  # nodePort: 30001
  extraPorts: []
ingress:
  enabled: false
  path: "/"
  tls:
    enabled: true
    acme: true
    secretName: ""
    useDefaultSecret: false
  # className: nginx
  modSecurity:
    enabled: false
    secRuleEngine: "DetectionOnly"
    # secRules:
    #   - variable: ""
    #     operator: ""
    #     action: ""
  canary:
    weight:
prometheus:
  metrics: false
livenessProbe:
  path: "/ping"
  initialDelaySeconds: 15
  timeoutSeconds: 15
  scheme: "HTTP"
  probeType: "httpGet"
  httpHeaders: []
readinessProbe:
  path: "/ping"
  initialDelaySeconds: 5
  timeoutSeconds: 3
  scheme: "HTTP"
  probeType: "httpGet"
  httpHeaders: []
startupProbe:
  enabled: false
  path: "/ping"
  initialDelaySeconds: 5
  timeoutSeconds: 3
  failureThreshold: 30
  periodSeconds: 10
  scheme: "HTTP"
  probeType: "httpGet"
  httpHeaders: []

#hostAliases:
#- ip: X.X.X.X
#  hostnames:
#  - dns1.DOMAIN1
#  - dns2.DOMAIN2

postgresql:
  managed: false
  managedClassSelector:
    #   matchLabels:
    #     stack: gitlab (This is an example. The labels should match the labels on the CloudSQLInstanceClass)

resources:
#  limits:
#    cpu: 100m
#    memory: 128Mi
  requests: {}
#    cpu: 100m
#    memory: 128Mi

## Configure PodDisruptionBudget
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
#
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  maxUnavailable: 1

## Configure NetworkPolicy
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
#
networkPolicy:
  enabled: false
  spec:
    podSelector:
      matchLabels: {}
    ingress:
    - from:
      - podSelector:
          matchLabels: {}
      - namespaceSelector:
          matchLabels:
            app.gitlab.com/managed_by: gitlab

ciliumNetworkPolicy:
  enabled: false
  alerts:
    enabled: false
  spec:
    endpointSelector: {}
    ingress:
    - fromEndpoints:
      - matchLabels:
          app.gitlab.com/managed_by: gitlab

serviceAccount:
  name:
  annotations: {}
  createNew: false

persistence:
  enabled: false
  volumes:
    - name: data
      mount:
        path: "/pvc-mount"
        # subPath: "/pvc-mount/config.txt"
      claim:
        accessMode: ReadWriteOnce
        size: 8Gi
        # If you want to use a custom storage class, you can specify `storageClass`. In this case, you need to create a storage class at first.
        # If `storageClass` is not specified, the behavior will vary per Kubernetes provider.
        # For example, GKE automatically chooses a default storage class and allocate a physical storage.
        # See https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes for more information.
        # storageClass: "myStorage"

## Configure extra Volumes
## ref: https://kubernetes.io/docs/concepts/storage/volumes/
#
extraVolumes: []
# - name: config-volume
#   configMap:
#     name: test-config

## Configure extra Volumes mounts
## ref: https://kubernetes.io/docs/concepts/storage/volumes/
#
extraVolumeMounts: []
# - name: config-volume
#   mountPath: /app/config.yaml
#   subPath: config.yaml

workers: {}
  # worker:
  #   replicaCount: 1
  #   terminationGracePeriodSeconds: 60
  #   hostAliases:
  #   - ip: X.X.X.X
  #     hostnames:
  #     - dns1.DOMAIN1
  #     - dns2.DOMAIN2
  #   labels:
  #     worker-type: worker
  #   command:
  #   - /bin/herokuish
  #   - procfile
  #   - start
  #   - worker
  #   nodeSelector: {}
  #   tolerations: []
  #   initContainers: []
  #   livenessProbe:
  #     path: "/"
  #     initialDelaySeconds: 15
  #     timeoutSeconds: 15
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #     httpHeader:
  #     - name: "custum-header"
  #       value: "awesome"
  #   readinessProbe:
  #     path: "/"
  #     initialDelaySeconds: 5
  #     timeoutSeconds: 3
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #     httpHeader:
  #     - name: "custum-header"
  #       value: "awesome"
  #   lifecycle:
  #     preStop:
  #       exec:
  #         command: ["/bin/sh", "-c", "sleep 10"]
  #   preStopCommand:
  #   - /bin/herokuish
  #   - procfile
  #   - start
  #   - stop_worker
  #   extraVolumes: []
  #   extraVolumeMounts: []

cronjobs: {}
  # job:
  #   schedule: "*/2 * * * *"
  #   image:
  #     repository: alpine
  #     tag: latest
  #   command: ["/bin/sh"]
  #   args: ["-c", "echo hello"]
  #   concurrencyPolicy: Forbid
  #   failedJobsHistoryLimit: 1
  #   restartPolicy: OnFailure
  #   startingDeadlineSeconds: 300
  #   successfulJobsHistoryLimit: 1
  #   livenessProbe:
  #     path: "/"
  #     initialDelaySeconds: 15
  #     timeoutSeconds: 15
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #   readinessProbe:
  #     path: "/"
  #     initialDelaySeconds: 5
  #     timeoutSeconds: 3
  #     failureThreshold: 3
  #     periodSeconds: 10
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #   extraVolumes: []
  #   extraVolumeMounts: []
