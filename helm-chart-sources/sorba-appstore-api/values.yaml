# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 4
strategyType:
# `serviceAccountName` is deprecated in favor of `serviceAccount.name`
serviceAccountName:
image:
  repository: sorbaregistry.azurecr.io/sorbotics/sorba-appstore/sorba-appstore-api/main
  tag: latest
  secrets:
    - name: gitlab-registry
extraLabels: {}
lifecycle: {}
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "sleep 10"]
podAnnotations: {}
nodeSelector: {}
dnsPolicy: {}
dnsConfig: {}
#    nameservers:
#      - 8.8.8.8
#    searches:
#      - svc.cluster.local
#      - cluster.local
#    options:
#      - name: ndots
#        value: "1"
affinity: {}
tolerations: []
priorityClassName:
initContainers: []
# - name: init-myservice
#   image: busybox
#   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice to start; sleep 1; done;']
topologySpreadConstraints: []
application:
  track: stable
  tier: web
  migrateCommand:
  initializeCommand:
  secretName: appstore-api-secrets
  secretChecksum:

  env: {}
    #database_url: mysql://root:4mz5IrvhZb@bitnami-mysql.for-test/tree
    #redis: '{"port": 6379, "host": "bitnami-redis-master.for-test","db": 0,"reconnectTime": 5000}'
    #CLOUD_GRAFANA_API: '{"URL":"http://bitnami-grafana:3000/api","USER":"admin","PASS":"sbrQp10"}'
    #HDFS_URL: http://192.168.1.94:3003
    #LICENSE_DECODER: '{"port": 8074,"host": "sorbapp-license-decoder-auto-deploy-app-gitlab","endpoint": "/api/decode"}'
    #SORBA_INTEGRATION_AUTHORIZATION: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNvcmJhIEludGVncmF0aW9uIiwiaWF0IjozNzM5NTcyMDAwMDB9.4A1X7l84wCJq7asgkGKaoYizlNBHnwGBm9Ex-YZRRzg'
    #SORBA_INTEGRATION_URL: http://sorbapp-sorba-dashboard-comm-auto-deploy-app-gitlab:5000
  
  extra_env: []
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  # Only one of targetCPUUtilizationPercentage and metrics can be chosen.
  # This is because targetCPUUtilizationPercentage is from autoscaling/v1,
  # whereas metrics is from autoscaling/v2beta2. If both are provided, only
  # metrics will be used.
  # See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
  # for examples of each.
  targetCPUUtilizationPercentage: 80
  # metrics:
  # - type: Resource
  #   resource:
  #     name: cpu
  #     target:
  #       type: Utilization
  #       averageUtilization: 80

gitlab:
  app:
  env:
  envName:
  envURL:
  projectID:
service:
  enabled: true
  annotations: {}
  name: web
  type: ClusterIP
  url: http://my.host.com/
  additionalHosts:
  commonName:
  externalPort: 5000
  internalPort: 5000
  # nodePort: 30001
  extraPorts: []
ingress:
  enabled: false
  path: "/"
  tls:
    enabled: true
    acme: true
    secretName: ""
    useDefaultSecret: false
  # className: nginx
  modSecurity:
    enabled: false
    secRuleEngine: "DetectionOnly"
    # secRules:
    #   - variable: ""
    #     operator: ""
    #     action: ""
  canary:
    weight:
prometheus:
  metrics: false
livenessProbe:
  path: "/ping"
  initialDelaySeconds: 15
  timeoutSeconds: 15
  scheme: "HTTP"
  probeType: "httpGet"
  httpHeaders: []
readinessProbe:
  path: "/"
  initialDelaySeconds: 5
  timeoutSeconds: 3
  scheme: "HTTP"
  probeType: "httpGet"
  httpHeaders: []
startupProbe:
  enabled: false
  path: "/"
  initialDelaySeconds: 5
  timeoutSeconds: 3
  failureThreshold: 30
  periodSeconds: 10
  scheme: "HTTP"
  probeType: "httpGet"
  httpHeaders: []

#hostAliases:
#- ip: X.X.X.X
#  hostnames:
#  - dns1.DOMAIN1
#  - dns2.DOMAIN2

postgresql:
  managed: false
  managedClassSelector:
    #   matchLabels:
    #     stack: gitlab (This is an example. The labels should match the labels on the CloudSQLInstanceClass)

resources:
  requests:
    memory: "250Mi"
    cpu: "250m"
  limits:
    memory: "500Mi"
    cpu: "1150m"

## Configure PodDisruptionBudget
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
#
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  maxUnavailable: 1

## Configure NetworkPolicy
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
#
networkPolicy:
  enabled: false
  spec:
    podSelector:
      matchLabels: {}
    ingress:
    - from:
      - podSelector:
          matchLabels: {}
      - namespaceSelector:
          matchLabels:
            app.gitlab.com/managed_by: gitlab

ciliumNetworkPolicy:
  enabled: false
  alerts:
    enabled: false
  spec:
    endpointSelector: {}
    ingress:
    - fromEndpoints:
      - matchLabels:
          app.gitlab.com/managed_by: gitlab

serviceAccount:
  name:
  annotations: {}
  createNew: false

persistence:
  enabled: false
  volumes:
    - name: data
      mount:
        path: "/pvc-mount"
        # subPath: "/pvc-mount/config.txt"
      claim:
        accessMode: ReadWriteOnce
        size: 8Gi
        # If you want to use a custom storage class, you can specify `storageClass`. In this case, you need to create a storage class at first.
        # If `storageClass` is not specified, the behavior will vary per Kubernetes provider.
        # For example, GKE automatically chooses a default storage class and allocate a physical storage.
        # See https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes for more information.
        # storageClass: "myStorage"

## Configure extra Volumes
## ref: https://kubernetes.io/docs/concepts/storage/volumes/
#
extraVolumes: []
# - name: config-volume
#   configMap:
#     name: test-config

## Configure extra Volumes mounts
## ref: https://kubernetes.io/docs/concepts/storage/volumes/
#
extraVolumeMounts: []
# - name: config-volume
#   mountPath: /app/config.yaml
#   subPath: config.yaml

workers: {}
  # worker:
  #   replicaCount: 1
  #   terminationGracePeriodSeconds: 60
  #   hostAliases:
  #   - ip: X.X.X.X
  #     hostnames:
  #     - dns1.DOMAIN1
  #     - dns2.DOMAIN2
  #   labels:
  #     worker-type: worker
  #   command:
  #   - /bin/herokuish
  #   - procfile
  #   - start
  #   - worker
  #   nodeSelector: {}
  #   tolerations: []
  #   initContainers: []
  #   livenessProbe:
  #     path: "/"
  #     initialDelaySeconds: 15
  #     timeoutSeconds: 15
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #     httpHeader:
  #     - name: "custum-header"
  #       value: "awesome"
  #   readinessProbe:
  #     path: "/"
  #     initialDelaySeconds: 5
  #     timeoutSeconds: 3
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #     httpHeader:
  #     - name: "custum-header"
  #       value: "awesome"
  #   lifecycle:
  #     preStop:
  #       exec:
  #         command: ["/bin/sh", "-c", "sleep 10"]
  #   preStopCommand:
  #   - /bin/herokuish
  #   - procfile
  #   - start
  #   - stop_worker
  #   extraVolumes: []
  #   extraVolumeMounts: []

cronjobs: {}
  # job:
  #   schedule: "*/2 * * * *"
  #   image:
  #     repository: alpine
  #     tag: latest
  #   command: ["/bin/sh"]
  #   args: ["-c", "echo hello"]
  #   concurrencyPolicy: Forbid
  #   failedJobsHistoryLimit: 1
  #   restartPolicy: OnFailure
  #   startingDeadlineSeconds: 300
  #   successfulJobsHistoryLimit: 1
  #   livenessProbe:
  #     path: "/"
  #     initialDelaySeconds: 15
  #     timeoutSeconds: 15
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #   readinessProbe:
  #     path: "/"
  #     initialDelaySeconds: 5
  #     timeoutSeconds: 3
  #     failureThreshold: 3
  #     periodSeconds: 10
  #     scheme: "HTTP"
  #     probeType: "httpGet"
  #   extraVolumes: []
  #   extraVolumeMounts: []
